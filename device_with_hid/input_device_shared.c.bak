/*
 ***********************************************

@Author:   zappen
@Mail:     zp935675863@gmail.com
@Date:     2024-07-13
@FileName: input_device_shared.c
 ***********************************************
*/

#include <stdio.h>
#include <linux/input.h>
#include <linux/uinput.h>
#include <fcntl.h>
#include <unistd.h>

#include <stdlib.h>
#include <string.h>

#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/time.h>
#include <pthread.h>

#include <libinput.h>
#include <libudev.h>
#include <errno.h>

#include "abs_mouse_device.h"
#include "debug_info.h"
#include "get_target_dev_info.h"


// 目标端口
#define SERVER_PORT 0x1024
#define MOUSE_DEV_PATH "/dev/input/event5"

extern char right_dev_ip[IPLEN];

// 客户端socket句柄
static int client_sock_fd;

double global_x = 960, global_y = 540;
double pointer_speed = -2;
int remote_flag = 0;
int mouse_enable = 1;

// 定义 libinput_interface 结构体的函数
static int open_restricted(const char *path, int flags, void *user_data) {
    int fd = open(path, flags);
    if (fd < 0)
        fprintf(stderr, "Failed to open %s (%s)\n", path, strerror(errno));
    return fd;
}

static void close_restricted(int fd, void *user_data) {
    close(fd);
}

// 定义 libinput_interface 结构体
static struct libinput_interface interface = {
    .open_restricted = open_restricted,
    .close_restricted = close_restricted,
};

static void handle_event(struct libinput_event *event) {
	int ret;
    if (libinput_event_get_type(event) == LIBINPUT_EVENT_POINTER_MOTION) {
        struct libinput_event_pointer *pointer_event = libinput_event_get_pointer_event(event);
        double dx_unacce = libinput_event_pointer_get_dx_unaccelerated(pointer_event);
        double dy_unacce = libinput_event_pointer_get_dy_unaccelerated(pointer_event);

		global_x += dx_unacce * (1 + pointer_speed), global_y += dy_unacce * (1 + pointer_speed);

		/* we assume we have two device, dev1 and dev2, 
		 * their screen is 1920x1080 and their position follow: 
		 *         ____________________     ____________________
		 *  	  |					   |   |					|
		 *		  |                    |   |                    |
		 *        |        dev1        |   |        dev2        |
		 *        |                    |   |                    |
		 *        |____________________|   |____________________|
		 */
		if (global_x <= 0) {
			DEBUG_INFO("Mouse reached the left boundary");
			global_x = 0;
		}
		if (global_x >= 1920) {
			DEBUG_INFO("Mouse reached the right boundary");
			//global_x = 1920;
			/* send event to another device */
			remote_flag = 1;
		}
		if (global_y <= 0) {
			DEBUG_INFO("Mouse reached the top boundary");
			global_y = 0;

		}
		if (global_y >= 1080) {
			DEBUG_INFO("Mouse reached the bottom boundary");
			global_y = 1080;
		}
    }
}


void *send_event_thread_func() {
	int mouse_fd = open(MOUSE_DEV_PATH, O_RDONLY);
	if (mouse_fd <= 0) {
		printf("open %s device error!\n", MOUSE_DEV_PATH);
		return NULL;
	}
	struct input_event event;
	int ret;
	while (1) {
		if (remote_flag == 1) {
			// unable mouse 
			system("sudo udevadm trigger --action=remove /dev/input/event5");
			mouse_enable = 0;
			// send event to another device
			ret = read(mouse_fd, &event, sizeof(event));
			if (ret == sizeof(event)) {
				send(client_sock_fd, &event, sizeof(struct input_event), 0);
			}
		} else {
			// to activate mouse
			if (mouse_enable == 0) {
				mouse_enable = 1;
				system("sudo udevadm trigger --action=add /dev/input/event5");
			}
		}
	}
	return NULL;	
}
void *build_socket_connect_thread_func() {
	int ret;
	struct sockaddr_in server_addr;
	/* 创建客户端套接字 */
	client_sock_fd = socket(AF_INET, SOCK_STREAM, 0);
	if (client_sock_fd < 0) {
		perror("Failed to create socket");
		exit(EXIT_FAILURE);
	}
	
	/* 设置服务器地址信息 */
	memset(&server_addr, 0, sizeof(server_addr));

	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = inet_addr(right_dev_ip);
	server_addr.sin_port = htons(SERVER_PORT);
	
	/* 建立连接 */
	ret = connect(client_sock_fd, (struct sockaddr*)&server_addr, sizeof(server_addr));
	if (ret < 0) {
		perror("failed to connect to the server");
		exit(EXIT_FAILURE);
	}
	DEBUG_INFO("connect to another successfully\n");
	return NULL;
}

void get_mouse_speed() {
	/* file_path = "/home/tclab/.config/kcminputrc" */
	char file_path[32] = "/home/";
	int file_path_len = strlen(file_path);

	char *user_name = getlogin(); // user_name = tclab
	int user_name_len = strlen(user_name);

	strcpy(file_path + file_path_len, user_name); // file_path = /home/tclab
	file_path_len += user_name_len; // update file_path_len

	char *file_postfix = "/.config/kcminputrc";
	int file_postfix_len = strlen(file_postfix);

	strcpy(file_path + file_path_len, file_postfix);
	file_path_len += file_postfix_len; // update file_path_len
	file_path[file_path_len] = '\0';

	/* now file_path_len = /home/tclab/.config/kcminputrc */
	DEBUG_INFO("file_path:%s", file_path);

    FILE *file = fopen(file_path, "r");
    if (!file) {
        perror("Failed to open file");
        return ;
    }

    char line[100];
    int device_found = 0;
    while (fgets(line, sizeof(line), file)) {
        // Remove newline character
        line[strcspn(line, "\n")] = 0;

        // Check for the device section
        if (strstr(line, " Mouse")) { // various mouse have different name, but all of them include " Mouse"
            device_found = 1;
            continue;
        }

        // If device section is found, look for PointerAcceleration
        if (device_found) {
            if (strstr(line, "PointerAcceleration")) {
                char *token = strtok(line, "=");
                token = strtok(NULL, "=");
                if (token) {
                    pointer_speed = atof(token);
                }
                break;
            }

            // If we encounter another section, stop searching
            if (line[0] == '[') {
                break;
            }
        }
    }
    fclose(file);
}
void *set_mouse_positon_func() {
	/* set mouse's absolute position in screen*/
	create_abs_mouse();
	usleep(100000);
	global_x = 960, global_y = 540;
	set_mouse_position(global_x, global_y);
	ioctl(abs_mouse_fd, UI_DEV_DESTROY);
	close(abs_mouse_fd);
	return NULL;
}

int main() {
	int ret;
    struct udev *udev = udev_new();
    struct libinput *li = libinput_udev_create_context(&interface, NULL, udev);
    libinput_udev_assign_seat(li, "seat0");
    struct libinput_event *event;

	/* setting mouse position need to sleep 10ms so we create a thread to reduce the effect to main thread */
	pthread_t set_position_thread;
	ret = pthread_create(&set_position_thread, NULL, set_mouse_positon_func, NULL);
	if (ret == 0) {
		//pthread_setname_np(set_position_thread, "set_position_thread");
		DEBUG_INFO("create thread successfully");
	} else {
		DEBUG_INFO("Failed to create thread");
	}

	/* get config info, such as server ip */
	get_info();
	DEBUG_INFO("right device ip : %s", right_dev_ip);

	/* get mouse's speed */
	get_mouse_speed();
	
	/* create a thread to build connection with another device */
	pthread_t build_socket_connect_thread;
	ret = pthread_create(&build_socket_connect_thread, NULL, build_socket_connect_thread_func, NULL);
	if (ret == 0) {
		DEBUG_INFO("create build_socket_connect_thread successfully");
	} else {
		DEBUG_INFO("Failed to create build_socket_connect_thread");
	}
	pthread_t send_event_thread;
	ret = pthread_create(&send_event_thread, NULL, send_event_thread_func, NULL);
	if (ret == 0) {
		DEBUG_INFO("create send_event_thread successfully");
	} else {
		DEBUG_INFO("Failed to create send_event_thread");
	}
	while (1) {
		libinput_dispatch(li);
		while ((event = libinput_get_event(li)) != NULL) {
			// 处理事件
			handle_event(event);
			libinput_event_destroy(event);
		}
	}

    libinput_unref(li);
    udev_unref(udev);
	pthread_join(set_position_thread, NULL);
	pthread_join(build_socket_connect_thread, NULL);
	pthread_join(send_event_thread, NULL);
	if (mouse_enable == 0) {
		system("sudo udevadm trigger --action=add /dev/input/event5");
	}
    return 0;
}

